using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libgeos_c"], :libgeos),
    LibraryProduct(prefix, ["libgeos"], :libgeos_cpp),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaGeo/GEOSBuilder/releases/download/v3.7.1-4"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/GEOS.v3.7.1.aarch64-linux-gnu.tar.gz", "f068db16525212216339e7147f9a1815823830d88f84747a83fe6f163f8ac90c"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/GEOS.v3.7.1.aarch64-linux-musl.tar.gz", "2ce70060b561410f3fa9fe2c062c029bda90c589f67c2c46cfeacfc86897f0f5"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/GEOS.v3.7.1.arm-linux-gnueabihf.tar.gz", "5f2e809f2b148750e2828aa1868892a703500fbac1501f2e0b0b9bcc0415b6c7"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/GEOS.v3.7.1.arm-linux-musleabihf.tar.gz", "8d391480e3866975a782d5275177dd0f42baacac90a4ba8795a62e4289608175"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/GEOS.v3.7.1.i686-linux-gnu.tar.gz", "4a949a62063d6cb22ca7e34774c9045af9e4fb4fe6547086755955a71d5c1003"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/GEOS.v3.7.1.i686-linux-musl.tar.gz", "d03113dbb73b3017411facd85bf4b8883ef9532615051139ccbfc0aaedd1c391"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/GEOS.v3.7.1.i686-w64-mingw32-gcc4.tar.gz", "d291a15bdbb20061ab11f519332ec99632f00b5543d2f21418532a7fce542f0a"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/GEOS.v3.7.1.i686-w64-mingw32-gcc7.tar.gz", "eb674de28ff4bc0b46f6c742383a08cf8d01de641666fbf8f0d33f364c39b282"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/GEOS.v3.7.1.i686-w64-mingw32-gcc8.tar.gz", "fdf80caff341e8e312bac52c59731a0ebad57743e640125c9a228d18ad7d3433"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/GEOS.v3.7.1.powerpc64le-linux-gnu.tar.gz", "4538281b23a8e53ada51884349895391beb88c61d9d42dc65e199842964f301f"),
    MacOS(:x86_64) => ("$bin_prefix/GEOS.v3.7.1.x86_64-apple-darwin14.tar.gz", "b1927eb42da8b4f9ea3abc43abf9464b725c4e832ac1254c5ace30bafd7698be"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/GEOS.v3.7.1.x86_64-linux-gnu.tar.gz", "ddeafafeae1edfb8d81c859231ef6fc5e2450397c85bf8d8a6c019cfc2fa9a9f"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/GEOS.v3.7.1.x86_64-linux-musl-gcc7.tar.gz", "753c78b479f877398b08092386044331df0ff77f2c2340d5ee20800c8a1fec77"),
    FreeBSD(:x86_64) => ("$bin_prefix/GEOS.v3.7.1.x86_64-unknown-freebsd11.1.tar.gz", "e0d3331a5649fc720a34fbc853cab4e4634c04b1fce29bc5cc97545f88352eeb"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/GEOS.v3.7.1.x86_64-w64-mingw32-gcc4.tar.gz", "81bf0bf787bbd6bd174fc30f28cf720a7832c4b4cad9e05f0c2c03c05ed68066"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/GEOS.v3.7.1.x86_64-w64-mingw32-gcc7.tar.gz", "50414f4bbe4d11a32b6cca480b3a453fdc75a772c6522a14cc67a6f686d8abce"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/GEOS.v3.7.1.x86_64-w64-mingw32-gcc8.tar.gz", "e4c303f54375eefe8660486a252c032c9bfa7e69770d72c0909da6e63e651fe7"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
@static if Sys.iswindows()
     dl_info = download_info[Windows(Sys.WORD_SIZE == 64 ? :x86_64 : :i686, compiler_abi=CompilerABI(:gcc7))]
else
     dl_info = choose_download(download_info, platform_key_abi())
end
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    @static if Sys.iswindows()
        install(dl_info...; prefix=prefix, force=true, verbose=verbose, ignore_platform=true)
    else
        install(dl_info...; prefix=prefix, force=true, verbose=verbose)
    end
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)

using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libgeos_c"], :libgeos),
    LibraryProduct(prefix, ["libgeos"], :libgeos_cpp),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaGeo/GEOSBuilder/releases/download/v3.7.0-0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/GEOS.v3.7.0.aarch64-linux-gnu.tar.gz", "d32427926d32fe67422f642e4480542297e71bd11e69993fb64f1ef848cf8235"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/GEOS.v3.7.0.aarch64-linux-musl.tar.gz", "bbc69370ece9eb6516dcc464cd799b20bdbe20c35542dcd2514a255d5c7b6702"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/GEOS.v3.7.0.arm-linux-gnueabihf.tar.gz", "edb1eb304a5360b1e383fabdb0d4cb224b2f426227c38e32669205eb152285f0"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/GEOS.v3.7.0.arm-linux-musleabihf.tar.gz", "6ca463c863d75224da0a158e8e052da11d0981ab3262bd6b24084854dfc25f73"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/GEOS.v3.7.0.i686-linux-gnu.tar.gz", "3525a582c72b150e17d02db9b9487191a0e5462bf1d06064c2639040f5960be9"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/GEOS.v3.7.0.i686-linux-musl.tar.gz", "2f69d1cca7a911721494729bb91c431478a8b99c6a0c981aa6ac6059558e357b"),
    Windows(:i686) => ("$bin_prefix/GEOS.v3.7.0.i686-w64-mingw32.tar.gz", "ccd98265c0af3c07ae6af42f1b6ddb1a8cc8acaac053e9e644b76ad8eb11c314"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/GEOS.v3.7.0.powerpc64le-linux-gnu.tar.gz", "0384aeb468977d336239decf74b30a1984a61df96e5978aac959bce5ae3bbf17"),
    MacOS(:x86_64) => ("$bin_prefix/GEOS.v3.7.0.x86_64-apple-darwin14.tar.gz", "295b3821b256f99672335c36820dc0b9098f5decd987fcf6a9b98ea8a92261d7"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/GEOS.v3.7.0.x86_64-linux-gnu.tar.gz", "b6d36cc6664d958a318b03e3c583e1eb333bd420d4da5249b0d8d93d5dad6279"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/GEOS.v3.7.0.x86_64-linux-musl-gcc7.tar.gz", "a82dc715dbd63b521b41e9decb5d796da0be17c917f05dd66a60983c693e4841"),
    FreeBSD(:x86_64) => ("$bin_prefix/GEOS.v3.7.0.x86_64-unknown-freebsd11.1.tar.gz", "63d941c438d22da591f79d1bde36987b7e6aada99e25bb576324d700bfa3cd7c"),
    Windows(:x86_64) => ("$bin_prefix/GEOS.v3.7.0.x86_64-w64-mingw32.tar.gz", "37540a044e93cc4b34c0d2e62895c9c63eb4766f108e7ea809bdbff8838e933a"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)

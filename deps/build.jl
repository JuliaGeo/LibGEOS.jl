using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libgeos_c"], :libgeos),
    LibraryProduct(prefix, ["libgeos"], :libgeos_cpp),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaGeo/GEOSBuilder/releases/download/v3.7.1-3"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/GEOS.v3.7.1.aarch64-linux-gnu.tar.gz", "a56889004f8d63f6311a54930fc979f3c082fe411a45a295bf6510708a2e37c4"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/GEOS.v3.7.1.aarch64-linux-musl.tar.gz", "50959603e338afb3d6354500b8dd845a3a844237d1e59b9a410e8f3a75f2014f"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/GEOS.v3.7.1.arm-linux-gnueabihf.tar.gz", "f166c6613c4dc6654d7da675801733c766485d7c72bd7817df0ca01f5c2b589e"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/GEOS.v3.7.1.arm-linux-musleabihf.tar.gz", "1ada74bee4ed20695f8e6b92e0dade79bb8eb500ed2741655b86a5d7909261c2"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/GEOS.v3.7.1.i686-linux-gnu.tar.gz", "645e74996e1a76210e285c8b8921a9c65ed098bb0e4a9f83b7fe4ff75b9e7fa0"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/GEOS.v3.7.1.i686-linux-musl.tar.gz", "fa20381356f36ce4866219c3c05455a27b8686af9e260c042e5c753187c9d08a"),
    Windows(:i686) => ("$bin_prefix/GEOS.v3.7.1.i686-w64-mingw32.tar.gz", "1978c58779cf814c01cacd9ab9178ac80bf6821f58be79cb21f3de58f4c75862"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/GEOS.v3.7.1.powerpc64le-linux-gnu.tar.gz", "f3e1979d2b1407eb499f1454eef87c595a26e31ad55b376794798bd8d23ca32f"),
    MacOS(:x86_64) => ("$bin_prefix/GEOS.v3.7.1.x86_64-apple-darwin14.tar.gz", "3a95942037c4b20e234eec7c24edafd2d03173ffbe60632a9941146f5a368ea2"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/GEOS.v3.7.1.x86_64-linux-gnu.tar.gz", "0efad78c552d21e6a4932f6e6e87981b7a244487ba6a5609ee03e7098ad61084"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/GEOS.v3.7.1.x86_64-linux-musl-gcc7.tar.gz", "3e36feaec4ea0c18250666f38166c504d789de326e335ec868bc7889183012a9"),
    FreeBSD(:x86_64) => ("$bin_prefix/GEOS.v3.7.1.x86_64-unknown-freebsd11.1.tar.gz", "3d7b7fbd75fa6c5347ff8eab4c12e13f50151e59cb21c6c9567eb8a5e89722ef"),
    Windows(:x86_64) => ("$bin_prefix/GEOS.v3.7.1.x86_64-w64-mingw32.tar.gz", "dc784fb5a7717b6822422ad863af3420005d1a45fa1ac57c730bc5a38c1c04d0"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
